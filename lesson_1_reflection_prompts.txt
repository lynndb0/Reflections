How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It reduced the amount of code to review manually, isolating the section of changes enabling much faster identification of the issue.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Makes it much easier to learn from mistakes, as well as making it possible to be 'bolder' in changes by ensuring the process to restore an old version of code is relatively painless.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros - ensures code & changes are logical (and will run/compile), potentially reduces the number of commits as an auto-commit would need to be done at short intervals to ensure sufficient commits available to readily restore when required.
    Cons - You have to remember to complete commits, also for complicated changes it may be difficult to break the changes into smaller logical steps - meaning you would have to remember to make mid-change commits to ensure progress is saved.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Probably depends on the type of file typically in use in the version control system, and the existence or non-existence of relationships / dependencies with other files in the version control system. 

How can you use the commands git log and git diff to view the history of files?

    git log provides a history of the commits, while git diff shows the difference betwen commits.

How might using version control make you more confident to make changes that
could break something?

    ...

Now that you have your workspace set up, what do you want to try using Git for?

    ...
